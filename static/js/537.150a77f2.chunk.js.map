{"version":3,"file":"static/js/537.150a77f2.chunk.js","mappings":"2UAIMA,EAAOC,EAAAA,YAAiB,CAAAC,EAA0BC,KAAG,IAA5B,UAAEC,GAAqBF,EAAPG,GAAKC,EAAAA,EAAAA,GAAAJ,EAAAK,GAAA,OAClDC,EAAAA,EAAAA,KAAA,OAAAC,EAAAA,EAAAA,GAAA,CACEN,IAAKA,EACLC,WAAWM,EAAAA,EAAAA,IAAG,2DAA4DN,IACtEC,GAAS,IAEjBL,EAAKW,YAAc,OAEnB,MAAMC,EAAaX,EAAAA,YAAiB,CAAAY,EAA0BV,KAAG,IAA5B,UAAEC,GAAqBS,EAAPR,GAAKC,EAAAA,EAAAA,GAAAO,EAAAC,GAAA,OACxDN,EAAAA,EAAAA,KAAA,OAAAC,EAAAA,EAAAA,GAAA,CACEN,IAAKA,EACLC,WAAWM,EAAAA,EAAAA,IAAG,gCAAiCN,IAC3CC,GAAS,IAEjBO,EAAWD,YAAc,aAEzB,MAAMI,EAAYd,EAAAA,YAAiB,CAAAe,EAA0Bb,KAAG,IAA5B,UAAEC,GAAqBY,EAAPX,GAAKC,EAAAA,EAAAA,GAAAU,EAAAC,GAAA,OACvDT,EAAAA,EAAAA,KAAA,OAAAC,EAAAA,EAAAA,GAAA,CACEN,IAAKA,EACLC,WAAWM,EAAAA,EAAAA,IAAG,qDAAsDN,IAChEC,GAAS,IAEjBU,EAAUJ,YAAc,YAExB,MAAMO,EAAkBjB,EAAAA,YAAiB,CAAAkB,EAA0BhB,KAAG,IAA5B,UAAEC,GAAqBe,EAAPd,GAAKC,EAAAA,EAAAA,GAAAa,EAAAC,GAAA,OAC7DZ,EAAAA,EAAAA,KAAA,OAAAC,EAAAA,EAAAA,GAAA,CACEN,IAAKA,EACLC,WAAWM,EAAAA,EAAAA,IAAG,gCAAiCN,IAC3CC,GAAS,IAEjBa,EAAgBP,YAAc,kBAE9B,MAAMU,EAAcpB,EAAAA,YAAiB,CAAAqB,EAA0BnB,KAAG,IAA5B,UAAEC,GAAqBkB,EAAPjB,GAAKC,EAAAA,EAAAA,GAAAgB,EAAAC,GAAA,OACzDf,EAAAA,EAAAA,KAAA,OAAAC,EAAAA,EAAAA,GAAA,CAAKN,IAAKA,EAAKC,WAAWM,EAAAA,EAAAA,IAAG,WAAYN,IAAgBC,GAAS,IAEpEgB,EAAYV,YAAc,cAE1B,MAAMa,EAAavB,EAAAA,YAAiB,CAAAwB,EAA0BtB,KAAG,IAA5B,UAAEC,GAAqBqB,EAAPpB,GAAKC,EAAAA,EAAAA,GAAAmB,EAAAC,GAAA,OACxDlB,EAAAA,EAAAA,KAAA,OAAAC,EAAAA,EAAAA,GAAA,CACEN,IAAKA,EACLC,WAAWM,EAAAA,EAAAA,IAAG,6BAA8BN,IACxCC,GAAS,IAEjBmB,EAAWb,YAAc,Y,8HCzCnBgB,GAAgBC,EAAAA,EAAAA,GACpB,8FAGIC,EAAQ5B,EAAAA,YAAiB,CAAAC,EAA0BC,KAAG,IAA5B,UAAEC,GAAqBF,EAAPG,GAAKC,EAAAA,EAAAA,GAAAJ,EAAAK,GAAA,OACnDC,EAAAA,EAAAA,KAACsB,EAAAA,GAAmBrB,EAAAA,EAAAA,GAAA,CAACN,IAAKA,EAAKC,WAAWM,EAAAA,EAAAA,IAAGiB,IAAiBvB,IAAgBC,GAAS,IAEzFwB,EAAMlB,YAAcmB,EAAAA,EAAoBnB,W,gJCRlCoB,EAAY9B,EAAAA,YAAiB,CAAAC,EAEjCC,KAAG,IADH,UAAEC,EAAS,YAAE4B,EAAc,aAAY,WAAEC,GAAa,GAAgB/B,EAAPG,GAAKC,EAAAA,EAAAA,GAAAJ,EAAAK,GAAA,OAGpEC,EAAAA,EAAAA,KAAC0B,EAAAA,GAAuBzB,EAAAA,EAAAA,GAAA,CACtBN,IAAKA,EACL8B,WAAYA,EACZD,YAAaA,EACb5B,WAAWM,EAAAA,EAAAA,IACT,qBACgB,eAAhBsB,EAA+B,iBAAmB,iBAClD5B,IAEEC,GAAS,IAEjB0B,EAAUpB,YAAcuB,EAAAA,EAAwBvB,W,2GChB1CwB,EAAWlC,EAAAA,YAAiB,CAAAC,EAA0BC,KAAS,IAAlC,UAAEC,GAAqBF,EAAPG,GAAKC,EAAAA,EAAAA,GAAAJ,EAAAK,GACtD,OACEC,EAAAA,EAAAA,KAAA,YAAAC,EAAAA,EAAAA,GAAA,CACEL,WAAWM,EAAAA,EAAAA,IACT,+SACAN,GAEFD,IAAKA,GACDE,GAAS,IAGnB8B,EAASxB,YAAc,U,kICiEvB,QAlEA,WACE,MAAOyB,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,KAC5BC,EAAeC,IAAoBF,EAAAA,EAAAA,UAAS,IAE7CG,EAAYL,EAAMM,OAClBC,EAAYP,EAAMQ,OAAOC,MAAM,OAAOC,OAAOC,SAASL,OACtDM,EAAYZ,EAAMS,MAAM,cAAcH,OAW5C,OACEO,EAAAA,EAAAA,MAACjD,EAAAA,GAAI,CAAAkD,SAAA,EACHD,EAAAA,EAAAA,MAACrC,EAAAA,GAAU,CAAAsC,SAAA,EACT1C,EAAAA,EAAAA,KAACO,EAAAA,GAAS,CAAAmC,SAAC,sBACX1C,EAAAA,EAAAA,KAACU,EAAAA,GAAe,CAAAgC,SAAC,gDAEnBD,EAAAA,EAAAA,MAAC5B,EAAAA,GAAW,CAACjB,UAAU,YAAW8C,SAAA,EAChCD,EAAAA,EAAAA,MAAA,OAAK7C,UAAU,YAAW8C,SAAA,EACxB1C,EAAAA,EAAAA,KAACqB,EAAAA,EAAK,CAACsB,QAAQ,QAAOD,SAAC,WACvB1C,EAAAA,EAAAA,KAAC2B,EAAAA,EAAQ,CACPiB,GAAG,QACHC,MAAOjB,EACPkB,SAAWC,GAAMlB,EAASkB,EAAEC,OAAOH,OACnCI,YAAY,aACZrD,UAAU,UAEZ6C,EAAAA,EAAAA,MAAA,OAAK7C,UAAU,oCAAmC8C,SAAA,EAChDD,EAAAA,EAAAA,MAAA,OAAK7C,UAAU,gCAA+B8C,SAAA,EAC5CD,EAAAA,EAAAA,MAAA,QAAAC,SAAA,CAAM,eAAaT,MACnBjC,EAAAA,EAAAA,KAAA,QAAMJ,UAAU,OAAM8C,SAAC,OACvBD,EAAAA,EAAAA,MAAA,QAAAC,SAAA,CAAM,UAAQP,MACdnC,EAAAA,EAAAA,KAAA,QAAMJ,UAAU,OAAM8C,SAAC,OACvBD,EAAAA,EAAAA,MAAA,QAAAC,SAAA,CAAM,UAAQF,SAEhBxC,EAAAA,EAAAA,KAACkD,EAAAA,EAAM,CAACC,QAjCEC,KAClBvB,EAAS,IACTG,EAAiB,GAAG,EA+BkBqB,QAAQ,QAAOX,SAAC,iBAMlD1C,EAAAA,EAAAA,KAACuB,EAAAA,EAAS,KAEVkB,EAAAA,EAAAA,MAAA,OAAK7C,UAAU,YAAW8C,SAAA,EACxB1C,EAAAA,EAAAA,KAAA,MAAIJ,UAAU,wBAAuB8C,SAAC,wBACtC1C,EAAAA,EAAAA,KAAC2B,EAAAA,EAAQ,CACPiB,GAAG,kBACHC,MAAOd,EACPuB,UAAQ,EACRL,YAAY,kBACZrD,UAAU,UAEZI,EAAAA,EAAAA,KAACkD,EAAAA,EAAM,CAACC,QA7CQI,KACtBvB,GAAiBwB,EAAAA,EAAAA,GAAU5B,GAAO,EA4CKc,SAAC,gCAK5C,C,iEC1EA,MAAMe,EAAYA,CAACC,EAAWC,KAE5B,IACE,MAAMC,EAAS,IAAIC,UAEnB,GADeD,EAAOE,gBAAgBJ,EAAW,YACtCK,qBAAqB,eAAe7B,OAAS,EACtD,MAAM,IAAI8B,MAAM,qBAEpB,CAAE,MAAOjB,GACP,MAAM,IAAIiB,MAAM,uBAAyBjB,EAAEkB,QAC7C,CAIA,IAAIC,EAAMR,EAAUS,QADR,gBACqB,YAE7BR,IACFO,EAAMA,EAAIC,QACR,sCACA,CAACC,EAAOC,EAASC,KACf,IACE,MAAMC,ECvBaC,KACzB,MAAMC,EAAeC,KAAKF,GACpBG,EAAQ,IAAIC,WAAWH,EAAavC,QAC1C,IAAK,IAAI2C,EAAI,EAAGA,EAAIJ,EAAavC,OAAQ2C,IACvCF,EAAME,GAAKJ,EAAaK,WAAWD,GAGrC,OADsB,IAAIE,YAAY,SAASC,OAAOL,EAClC,EDgBEM,CAAaX,GACvBY,EAAmBzB,EAAUc,EAASZ,GAC5C,MAAM,IAANwB,OAAWd,EAAO,OAAAc,OAC1BD,EAAgB,QAAAC,OACdd,EAAO,IACH,CAAE,MAAOtB,GAEP,OADAqC,QAAQC,KAAK,mCAAoCtC,GAC1CqB,CACT,MAKN,IAAIkB,EAAY,GACZC,EAAM,EAkBV,OAhBArB,EAAI7B,MAAM,MAAMmD,SAASC,IACvB,IAAIC,EAAS,EACTD,EAAKrB,MAAM,kBACbsB,EAAS,EACAD,EAAKrB,MAAM,UACR,IAARmB,IAAWA,GAAO,GAEtBG,EADSD,EAAKrB,MAAM,qBACX,EAEA,EAGXkB,GArCc,KAqCOK,OAAOJ,GAAOE,EAAO,KAC1CF,GAAOG,CAAM,IAGRJ,CAAS,EAQLM,EAASA,CAACC,EAAWC,EAAQC,KACxC,OAAQF,EAAUG,eAChB,IAAK,MACH,OAAOvC,EAAUqC,EAAQC,GAC3B,IAAK,OACH,OAVcE,EAUIH,EARfI,IAAAA,GAAYC,KAAKC,UAAUD,KAAKE,MAAMJ,IAAc,CAAEK,YAAa,IASxE,QACE,OAAOR,EAZOG,KAalB,EAGWzC,EAAa+C,GACjBA,EAAYpC,QAAQ,OAAQ,KAAK/B,M","sources":["components/ui/card.jsx","components/ui/label.jsx","components/ui/separator.jsx","components/ui/textarea.jsx","pages/StringUtils.js","utils/format.js","utils/decode.js"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"src/lib/utils\"\n\nconst Card = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"rounded-lg border bg-card text-card-foreground shadow-sm\", className)}\n    {...props} />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props} />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-2xl font-semibold leading-none tracking-tight\", className)}\n    {...props} />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props} />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props} />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva } from \"class-variance-authority\";\n\nimport { cn } from \"src/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root ref={ref} className={cn(labelVariants(), className)} {...props} />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"src/lib/utils\"\n\nconst Separator = React.forwardRef((\n  { className, orientation = \"horizontal\", decorative = true, ...props },\n  ref\n) => (\n  <SeparatorPrimitive.Root\n    ref={ref}\n    decorative={decorative}\n    orientation={orientation}\n    className={cn(\n      \"shrink-0 bg-border\",\n      orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n      className\n    )}\n    {...props} />\n))\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","import * as React from \"react\"\n\nimport { cn } from \"src/lib/utils\"\n\nconst Textarea = React.forwardRef(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-input px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props} />\n  );\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","import { useState } from \"react\";\nimport { Button } from \"../components/ui/button\";\nimport { Textarea } from \"../components/ui/textarea\";\nimport { Label } from \"../components/ui/label\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"../components/ui/card\";\nimport { Separator } from \"../components/ui/separator\";\nimport { toOneLine } from \"../utils/format\";\n\nfunction StringUtils() {\n  const [input, setInput] = useState(\"\");\n  const [oneLineOutput, setOneLineOutput] = useState(\"\");\n\n  const charCount = input.length;\n  const wordCount = input.trim().split(/\\s+/).filter(Boolean).length;\n  const lineCount = input.split(/\\r\\n|\\r|\\n/).length;\n\n  const handleClear = () => {\n    setInput(\"\");\n    setOneLineOutput(\"\");\n  };\n\n  const handleToOneLine = () => {\n    setOneLineOutput(toOneLine(input));\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>String Utilities</CardTitle>\n        <CardDescription>A collection of useful string utilities</CardDescription>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div className=\"space-y-2\">\n          <Label htmlFor=\"input\">Input</Label>\n          <Textarea\n            id=\"input\"\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            placeholder=\"Enter text\"\n            className=\"h-48\"\n          />\n          <div className=\"flex items-center justify-between\">\n            <div className=\"text-sm text-muted-foreground\">\n              <span>Characters: {charCount}</span>\n              <span className=\"mx-2\">|</span>\n              <span>Words: {wordCount}</span>\n              <span className=\"mx-2\">|</span>\n              <span>Lines: {lineCount}</span>\n            </div>\n            <Button onClick={handleClear} variant=\"ghost\">\n              Clear\n            </Button>\n          </div>\n        </div>\n\n        <Separator />\n\n        <div className=\"space-y-2\">\n          <h3 className=\"text-lg font-semibold\">String to One Line</h3>\n          <Textarea\n            id=\"one-line-output\"\n            value={oneLineOutput}\n            readOnly\n            placeholder=\"One line output\"\n            className=\"h-24\"\n          />\n          <Button onClick={handleToOneLine}>Convert to One Line</Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n\nexport default StringUtils;\n","import { base64ToUtf8 } from \"./decode\";\nimport beautify from \"js-beautify\";\n\nconst formatXML = (xmlString, decodeOriginalMessage) => {\n  // Basic XML validation\n  try {\n    const parser = new DOMParser();\n    const xmlDoc = parser.parseFromString(xmlString, \"text/xml\");\n    if (xmlDoc.getElementsByTagName(\"parsererror\").length > 0) {\n      throw new Error(\"Invalid XML syntax\");\n    }\n  } catch (e) {\n    throw new Error(\"Invalid XML syntax: \" + e.message);\n  }\n\n  const PADDING = \"  \";\n  const reg = /(>)(<)(\\/\\*)/g;\n  let xml = xmlString.replace(reg, \"$1\\n$2$3\");\n\n  if (decodeOriginalMessage) {\n    xml = xml.replace(\n      /<([^>]*OrgMsg[^>]*)>([^<]+)<\\/\\1>/g,\n      (match, tagName, base64Content) => {\n        try {\n          const decoded = base64ToUtf8(base64Content);\n          const formattedDecoded = formatXML(decoded, decodeOriginalMessage); // recursive formatting\n          return `<${tagName}>\n${formattedDecoded}\n</${tagName}>`;\n        } catch (e) {\n          console.warn(\"Failed to decode base64 content:\", e);\n          return match;\n        }\n      }\n    );\n  }\n\n  let formatted = \"\";\n  let pad = 0;\n\n  xml.split(\"\\n\").forEach((node) => {\n    let indent = 0;\n    if (node.match(/.+<\\/\\w[^>]*>$/)) {\n      indent = 0;\n    } else if (node.match(/^<\\/\\w/)) {\n      if (pad !== 0) pad -= 1;\n    } else if (node.match(/^<\\w[^>]*[^/]>.*$/)) {\n      indent = 1;\n    } else {\n      indent = 0;\n    }\n\n    formatted += PADDING.repeat(pad) + node + \"\\n\";\n    pad += indent;\n  });\n\n  return formatted;\n};\n\nconst formatJSON = (jsonString) => {\n  // This will throw an error if the JSON is invalid\n  return beautify.js(JSON.stringify(JSON.parse(jsonString)), { indent_size: 2 });\n};\n\nexport const format = (formatter, string, checkbox) => {\n  switch (formatter.toLowerCase()) {\n    case \"xml\":\n      return formatXML(string, checkbox);\n    case \"json\":\n      return formatJSON(string);\n    default:\n      return string;\n  }\n};\n\nexport const toOneLine = (inputString) => {\n  return inputString.replace(/\\s+/g, \" \").trim();\n};\n\n","\nexport const base64ToUtf8 = (base64) => {\n    const binaryString = atob(base64);\n    const bytes = new Uint8Array(binaryString.length);\n    for (let i = 0; i < binaryString.length; i++) {\n      bytes[i] = binaryString.charCodeAt(i);\n    }\n    const decodedString = new TextDecoder(\"utf-8\").decode(bytes);\n    return decodedString;\n  };\n"],"names":["Card","React","_ref","ref","className","props","_objectWithoutProperties","_excluded","_jsx","_objectSpread","cn","displayName","CardHeader","_ref2","_excluded2","CardTitle","_ref3","_excluded3","CardDescription","_ref4","_excluded4","CardContent","_ref5","_excluded5","CardFooter","_ref6","_excluded6","labelVariants","cva","Label","LabelPrimitive","Separator","orientation","decorative","SeparatorPrimitive","Textarea","input","setInput","useState","oneLineOutput","setOneLineOutput","charCount","length","wordCount","trim","split","filter","Boolean","lineCount","_jsxs","children","htmlFor","id","value","onChange","e","target","placeholder","Button","onClick","handleClear","variant","readOnly","handleToOneLine","toOneLine","formatXML","xmlString","decodeOriginalMessage","parser","DOMParser","parseFromString","getElementsByTagName","Error","message","xml","replace","match","tagName","base64Content","decoded","base64","binaryString","atob","bytes","Uint8Array","i","charCodeAt","TextDecoder","decode","base64ToUtf8","formattedDecoded","concat","console","warn","formatted","pad","forEach","node","indent","repeat","format","formatter","string","checkbox","toLowerCase","jsonString","beautify","JSON","stringify","parse","indent_size","inputString"],"sourceRoot":""}